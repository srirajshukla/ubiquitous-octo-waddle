from fastapi import APIRouter
import datetime
import secrets
from typing import Union, Annotated, List, Literal
import uuid

import repository.db as db
import model.saved_file as SF

from fastapi import Body, FastAPI, Form, UploadFile, File, Depends, HTTPException, status, BackgroundTasks
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel, ValidationError, Field, model_validator
from sqlalchemy.orm import Session

import llm.training as llmtraining
from dotenv import load_dotenv
import os
load_dotenv()

router = APIRouter()

security = HTTPBasic()


def get_current_username(
    credentials: Annotated[HTTPBasicCredentials, Depends(security)]
):
    current_username_bytes = credentials.username.encode("utf8")
    print(os.getenv("USER_USERNAME"))
    correct_username_bytes = os.getenv("USER_USERNAME").encode("utf8")
    is_correct_username = secrets.compare_digest(
        current_username_bytes, correct_username_bytes
    )
    current_password_bytes = credentials.password.encode("utf8")
    correct_password_bytes = os.getenv("USER_PASSWORD").encode("utf8")
    is_correct_password = secrets.compare_digest(
        current_password_bytes, correct_password_bytes
    )
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username


@router.get("/ping")
def get_ping():
    return {"ping": datetime.datetime.now()}


def upload_file_bg_task(db: Session, filepaths, user, trackingid, year):
    status = llmtraining.pdf_loader(filepaths)
    for file in filepaths:
        out = SF.update_savedfile(db, file, user, year, trackingid, "DONE")
        print(out)
    print(status)

from io import BytesIO, BufferedReader
import repository.azure_storage as azstore

@router.post("/esgreports/upload")
async def upload_files(
    documentName: Annotated[list[UploadFile], File()],
    DocumentURL: Annotated[list[str], Form()],
    year: Annotated[str, Form()],
    background_tasks: BackgroundTasks,
    db: Session = Depends(db.get_db),
    user: str = Depends(get_current_username),
):
    print(documentName)
    DocumentURL = DocumentURL[0].split(",")
    print(DocumentURL)

    trackerid = str(uuid.uuid4())
    status = "IN PROGRESS"
    filepaths = []
    for file, url in zip(documentName, DocumentURL):
        with open(file.filename, "wb") as out_file:
            content = file.file.read()
            out_file.write(content)
            azstore.upload_blob_to_container(content, file.filename, year)
            SF.create_savedfile(
                db, year, file.filename, url, "training", user, trackerid
            )
            filepaths.append(file.filename)

    background_tasks.add_task(upload_file_bg_task, db=db, filepaths=filepaths, user=user, trackingid=trackerid, year=year)
            
    return {"status": status, "message": "uploaded files", "trackerid": trackerid}


class ReportYear(BaseModel):
    year: str


@router.post("/esgreports/retrieve")
def retrieve_files(
    report_year: ReportYear,
    db: Session = Depends(db.get_db),
    user: str = Depends(get_current_username),
):
    files = SF.get_savedfile(db, report_year.year, user)
    print(files)
    ans = []
    for file in files:
        docs = {"filename" : file.filename}

        metadata = {
            "documentType": "PDF",
            "referenceLink": file.url,
            "generated By": file.user,
            "reportYear": file.year,
        }

        docs["metadata"] = metadata
        ans.append(docs)


    return {"documents": ans}

import json
class Metadata(BaseModel):
    generateReportForYear: str = Field(...)
    userId: str = Field(...)

    @model_validator(mode="before")
    @classmethod
    def validate_to_json(cls, value):
        if isinstance(value, str):
            return cls(**json.loads(value))
        return value

def checker(data: str = Form(...)):
    try:
        return Metadata.model_validate_json(data)
    except ValidationError as e:
        raise HTTPException(
            detail=jsonable_encoder(e.errors()),
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        )

@router.post("/questionnaire/generatefirstdraft/pdf")
def generate_first_draft(
    SurveyQuestionnaireDocumentName: Annotated[UploadFile, File()],
    documentType : Annotated[Literal['PDF', 'XLS'], Form()],
    metadata: Metadata = Body(...),
    db: Session = Depends(db.get_db),
    user: str = Depends(get_current_username),
):
    print(metadata)
    trackerid = str(uuid.uuid4())
    with open(SurveyQuestionnaireDocumentName.filename, "wb") as out_file:
        content = SurveyQuestionnaireDocumentName.file.read()
        out_file.write(content)
        SF.create_savedfile(
                db, metadata.generateReportForYear, SurveyQuestionnaireDocumentName.filename, SurveyQuestionnaireDocumentName.filename, "Questionnaire", user, trackerid
            )

    return {"taskid": trackerid, "status": "processing", "createdAt": datetime.datetime.now()}


@router.get("/questionnaire/generatefirstdraft/pdf/{reportYear}/{TaskId}/status")
def get_draft_status(
    reportYear,
    TaskId,
    db: Session = Depends(db.get_db),
    user: str = Depends(get_current_username),

):
    file = SF.get_taskid_status(db, TaskId, user, reportYear)
    return {"taskid": file.trackerid, "status": file.embed_status, "created": datetime.datetime.now()}


@router.get("/firstdraftreport/download/result/{reportYear}")
def get_draft_report(reportYear):
    return {"file": "ok"}


class QuestionAnswer(BaseModel):
    reportYear: str
    inputQuestion: str


class QuestionAnswerResult(BaseModel):
    reportYear: str

import llm.questionnaire as llmquestions

@router.post("/questionnaire/generatefirstdraft/generateAnswer")
def question_answer(question: QuestionAnswer):
    response = llmquestions.query(question.inputQuestion)
    return {
        "reportYear": question.reportYear,
        "questionnaireSummary": {
            "response": response,
            "status": "success",
            "citation": "this page",
            "documentRef": "page 1",
            "accuracy": "0.8",
            "confidence": "0.8",
        },
    }
